plugins {
    id 'java'
    id 'jacoco'
}

jar {
    archiveVersion = '0.5-SNAPSHOT' // To be bumped by task in future
}

sourceSets {
    // Move unit test locations from default '/test' to '/test/unit'
    test {
        java.srcDirs = ['src/test/unit/java']
        java.outputDir = file("$buildDir/classes/java/test/unit")
        resources.srcDirs = ['src/test/unit/resources']
        output.resourcesDir = file("$buildDir/resources/test/unit")
    }
    
    // Define large tests in '/test/large'
    largeTest {
        java.srcDirs = ['src/test/large/java']
        java.outputDir = file("$buildDir/classes/java/test/large")
        resources.srcDirs = ['src/test/large/resources']
        output.resourcesDir = file("$buildDir/resources/test/large")
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    // All unit test dependencies are also large test dependencies
    largeTestImplementation.extendsFrom testImplementation
    largeTestRuntimeOnly.extendsFrom testRuntimeOnly
}

repositories {
    jcenter()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.1'
    
    testImplementation 'org.assertj:assertj-core:3.16.1'
    testImplementation 'org.mockito:mockito-core:3.4.4'
    
    // Used by TwoHundredRequestsFromSameClient
    largeTestImplementation 'org.junit.jupiter:junit-jupiter-params:5.5.1'
}

// Ensure backwards compatibility for Java 11
// https://stackoverflow.com/a/43103038/1268003
// https://docs.gradle.org/6.6/release-notes.html#javacompile-release
compileJava {
    options.release = 11
}

tasks.withType(JavaCompile) {
    options.compilerArgs.addAll([
        '-Xlint:unchecked',
        '-Xlint:deprecation',
        '-Xdiags:verbose'])
}

test {
    useJUnitPlatform()
}

task largeTest(type: Test) {
    description = 'Runs the large tests.'
    group = 'verification'
    
    useJUnitPlatform()
    
    testClassesDirs = sourceSets.largeTest.output.classesDirs
    classpath = sourceSets.largeTest.runtimeClasspath
    shouldRunAfter test
}

check.dependsOn largeTest

// Generate report after tests
tasks.withType(Test).configureEach {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    // Use data file not just from test but also largeTest
    getExecutionData().setFrom(
            fileTree(dir: "$buildDir/jacoco", includes: ['*.exec']))
}

javadoc {
    title = 'NoMagicHTTP ' + jar.archiveVersion.get()
    // default description was "Generates Javadoc API documentation for the main source code."
    description = 'Generates Javadoc API documentation (public symbols from main source set).'
}

// Build JavaDoc HTML for developers
task javadocall(type: Javadoc) {
    title = javadoc.title + ' (for library developers)'
    description = 'Generates all Javadoc API documentation (include private symbols and test classes).'
    group = 'documentation'
    
    source = [sourceSets.main.allJava, sourceSets.test.allJava, sourceSets.largeTest.allJava]
    classpath = sourceSets.largeTest.compileClasspath
    
    options.memberLevel = JavadocMemberLevel.PRIVATE
    destinationDir = file("$buildDir/docs/javadoc-all")
}

// Add support for modern JavaDoc tags
// https://openjdk.java.net/jeps/8068562
tasks.withType(Javadoc) {
    (options as StandardJavadocDocletOptions).tags(
        'apiNote:a:API Note:',
        'implSpec:a:Implementation Requirements:',
        'implNote:a:Implementation Note:')
}

// Add tasks "javadocJar" and "sourcesJar" (for IDE:s and other tooling)
java {
    withJavadocJar() // .jar contains HTML from the javadoc task, not javadocall
    withSourcesJar() // contains .java source code files; no .class files or HTML
}

// ... and append version classifier to said artifacts
javadocJar.archiveVersion = jar.archiveVersion // build/libs/nomagichttp-{archiveVersion}-javadoc.jar
sourcesJar.archiveVersion = jar.archiveVersion // build/libs/nomagichttp-{archiveVersion}-sources.jar

// withJavadocJar() added the javadoc task as a dependency on the assemble task,
// also add the javadocall task as dependency (we want gradle build to fail if any doc task fails)
assemble.dependsOn javadocall