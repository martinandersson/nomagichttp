plugins {
    id 'java'
    id 'jacoco'
    // Jitpack.io's publishing service needs the task publishToMavenLocal
    id 'maven-publish'
}

sourceSets {
    // Move "unit" test locations from default '/test' to '/test/small'
    test {
        java.srcDirs = ['src/test/small/java']
        java.outputDir = file("$buildDir/classes/java/test/small")
        resources.srcDirs = ['src/test/small/resources']
        output.resourcesDir = file("$buildDir/resources/test/small")
    }
    
    // Define large tests in '/test/large'
    largeTest {
        java.srcDirs = ['src/test/large/java']
        java.outputDir = file("$buildDir/classes/java/test/large")
        resources.srcDirs = ['src/test/large/resources']
        output.resourcesDir = file("$buildDir/resources/test/large")
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    // All small test dependencies are also large test dependencies
    largeTestImplementation.extendsFrom testImplementation
    largeTestRuntimeOnly.extendsFrom testRuntimeOnly
}

repositories {
    jcenter()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.1'
    
    testImplementation 'org.assertj:assertj-core:3.19.0'
    testImplementation 'org.mockito:mockito-core:3.9.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.1'
}

// To be bumped by task in future or perhaps not even set in this file
version = '0.5-SNAPSHOT'

// By default, all compiler- and JavaDoc warnings are errors.
// Unless environment variable HACKING=true.
def Werror = !(System.env.HACKING ?: false).toBoolean()

wrapper {
    gradleVersion = '6.8.3'
    distributionType = Wrapper.DistributionType.ALL
}

// Ensure backwards compatibility for Java 11
// https://stackoverflow.com/a/43103038/1268003
// https://docs.gradle.org/6.6/release-notes.html#javacompile-release
compileJava {
    options.release = 11
}

tasks.withType(JavaCompile) {
    options.compilerArgs.addAll([
        '-Xlint',                  // Enable all warnings
        '-Xdoclint:all/protected', // Also check JavaDoc (protected and higher)
        '-Xdiags:verbose'])        // Talk more
    
    // Fail on any warning
    if (Werror) options.compilerArgs.add '-Werror'
}

test {
    useJUnitPlatform()
}

task largeTest(type: Test) {
    description = 'Runs the large tests.'
    group = 'verification'
    
    useJUnitPlatform()
    
    testClassesDirs = sourceSets.largeTest.output.classesDirs
    classpath = sourceSets.largeTest.runtimeClasspath
    shouldRunAfter test
}

check.dependsOn largeTest

// Generate report after tests
tasks.withType(Test).configureEach {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    // Use data file not just from test but also largeTest
    getExecutionData().setFrom(
            fileTree(dir: "$buildDir/jacoco", includes: ['*.exec']))
}

javadoc {
    title = 'NoMagicHTTP ' + version + ' API'
    // default description was "Generates Javadoc API documentation for the main source code."
    description = 'Generates Javadoc API documentation (public symbols from main source set).'
}

// Build JavaDoc HTML for developers
task javadocAll(type: Javadoc) {
    title = javadoc.title + ' (for library developers)'
    description = 'Generates all Javadoc API documentation (public+private symbols and test classes).'
    group = 'documentation'
    
    source = [sourceSets.main.allJava, sourceSets.test.allJava, sourceSets.largeTest.allJava]
    classpath = sourceSets.largeTest.compileClasspath
    
    options.memberLevel = JavadocMemberLevel.PRIVATE
    destinationDir = file("$buildDir/docs/javadoc-all")
}

tasks.withType(Javadoc) {
    // Add support for modern JavaDoc tags
    // https://openjdk.java.net/jeps/8068562
    options.tags(
        'apiNote:a:API Note:',
        'implSpec:a:Implementation Requirements:',
        'implNote:a:Implementation Note:')
    
    // Fail on any warning
    // https://stackoverflow.com/a/49544352/1268003
    // https://github.com/gradle/gradle/issues/2354#issuecomment-364857181
    if (Werror) {
        def opt = JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_15) ?
            "Werror" : "Xwerror";
        
        options.addBooleanOption(opt, true)
    } 
    
    // No warnings for missed comments (can't disable only for private symbols)
    options.addBooleanOption('Xdoclint:all,-missing', true)
    
    // Text to be injected as overview
    options.overview = 'src/main/java/overview.html'
    
    // Link to JDK JavaDoc
    def v = compileJava.options.release.get()
    options.links("https://docs.oracle.com/en/java/javase/$v/docs/api")
}

// Add tasks "javadocJar" and "sourcesJar" (for IDE:s and other tooling)
java {
    withJavadocJar() // .jar contains HTML from the javadoc task, not javadocAll
    withSourcesJar() // contains .java source code files; no .class files or HTML
}

// withJavadocJar() added the javadoc task as an assemble task dependency,
// do the same for javadocAll (gradle build will fail if any doc task fails)
assemble.dependsOn javadocAll

// For jitpack.io, define a publication
publishing.publications {
    thisNameMakesNoDifference(MavenPublication) {
        from components.java
        pom.licenses {
            license {
                name = 'The Apache License, Version 2.0'
                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
        }
    }
}