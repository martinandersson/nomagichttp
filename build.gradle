plugins {
    // TODO: Use explicit versions of each (just as we do wrapper)
    id 'java'
    id 'jacoco'
}

sourceSets {
    test {
        // Move unit test locations from default '/test' to 'test/unit'
        java.srcDirs = ['src/test/unit/java']
        java.outputDir = file("$buildDir/classes/java/test/unit")
        resources.srcDirs = ['src/test/unit/resources']
        output.resourcesDir = file("$buildDir/resources/test/unit")
    }
}

repositories {
    jcenter()
}

dependencies {
    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'
    testImplementation 'org.assertj:assertj-core:3.16.1'
    
    testImplementation 'org.mockito:mockito-core:3.4.4'
    
    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.1'
}

compileJava {
    // TODO: Figure out this: https://stackoverflow.com/a/22326989
    //sourceCompatibility = JavaVersion.VERSION_11
    //targetCompatibility = JavaVersion.VERSION_11
}

// https://stackoverflow.com/a/22326989
// https://stackoverflow.com/a/43103038
// https://github.com/gradle/gradle/issues/2510

if (JavaVersion.current() < JavaVersion.VERSION_11) {
    throw new GradleException("This project requires at least Java 11, but it's running on " + JavaVersion.current() + ".");
}

tasks.withType(JavaCompile) {
    options.compilerArgs.addAll(['--release', '11'])
}

test {
    useJUnitPlatform()
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}